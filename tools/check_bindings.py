"""
# check_bindings.py

This script matches every Zig bindings struct to the corresponding C struct in
the original C headers and compiles a little Zig program and C program to print
the respective size they represent (@sizeOf for Zig, sizeof for C), then checks
to make sure they are equal.

To use it run:

```sh
python3 -m check_bindings /path/to/Video_Codec_SDK_12.0.16/Interface /path/to/cuda.h
```

You must supply the SDK Interface dir and cuda.h yourself.
"""

import sys
import tempfile
import shutil
import subprocess
from pathlib import Path

def check_bindings(interface_dir, cuda_h):
    c_structs = find_c_structs(interface_dir)
    zig_structs = find_zig_structs()
    mapping = {}

    for scope in ['nvdec', 'nvenc']:
        for c_struct in c_structs[scope]:
            z = find_corresponding_zig_struct_and_remove(zig_structs[scope], c_struct)
            if z is not None:
                mapping[c_struct] = (scope, z)
    # manual
    mapping['NV_ENC_CONFIG_HEVC_VUI_PARAMETERS'] = ('nvenc', 'ConfigHEVCVuiParameters') # typedef alias
    zig_structs['nvenc'].remove('ConfigHEVCVuiParameters')

    mapping = list(sorted(mapping.items(), key=lambda t: t[0]))

    assert(len(zig_structs['nvdec']) == 0)
    assert(len(zig_structs['nvenc']) == 0)

    with tempfile.TemporaryDirectory() as tempdir:
        tempdir = Path(tempdir)
        nvenc_zig = Path('../nvenc_bindings.zig')
        nvdec_zig = Path('../nvdec_bindings.zig')
        for file in [nvenc_zig, nvdec_zig, Path('../cuda_bindings.zig')]:
            shutil.copyfile(file, tempdir / file.name)
        zig_gen = '''/// Generated by check_bindings.py
pub const std = @import("std");
pub const nvdec_bindings = @import("nvdec_bindings.zig");
pub const nvenc_bindings = @import("nvenc_bindings.zig");
pub fn main() !void {
'''
        for _, (scope, z) in mapping:
            zig_gen += f'    std.debug.print("{{d}}\\n", .{{ @sizeOf({scope}_bindings.{z}) }});\n'
        zig_gen += '}'
        (tempdir / 'zsizeof.zig').write_text(zig_gen)
        subprocess.run(['zig', 'build-exe', '--dep', 'cuda_bindings', '-Mzsizeof=zsizeof.zig', '-Mcuda_bindings=cuda_bindings.zig'], cwd=tempdir)
        zig_out = subprocess.run(['./zsizeof'], cwd=tempdir, capture_output=True)
        zig_out = zig_out.stderr.decode('utf-8')
        zig_sizes = [int(l.strip()) for l in zig_out.splitlines() if l.strip() != '']

    with tempfile.TemporaryDirectory() as tempdir:
        tempdir = Path(tempdir)
        nv_encode_api_h = interface_dir / "nvEncodeAPI.h"
        nv_cuvid_h = interface_dir / "nvcuvid.h"
        cuvid_dec_h = interface_dir / "cuviddec.h"
        for file in [nv_encode_api_h, nv_cuvid_h, cuvid_dec_h, cuda_h]:
            shutil.copyfile(file, tempdir / file.name)
        c_gen = '''/* Generated by check_bindings.py */
#include <stdio.h>
#include "nvEncodeAPI.h"
#include "nvcuvid.h"
#include "cuviddec.h"
int main() {
'''
        for c, _ in mapping:
            c_gen += f'    printf("%d\\n", sizeof({c}));\n'
        c_gen += '}'
        (tempdir / 'csizeof.c').write_text(c_gen)
        subprocess.run(['cc', 'csizeof.c', '-I.', '-o', 'csizeof'], cwd=tempdir)
        c_out = subprocess.run(['./csizeof'], cwd=tempdir, capture_output=True)
        c_out = c_out.stdout.decode('utf-8')
        c_sizes = [int(l.strip()) for l in c_out.splitlines() if l.strip() != '']

    mismatch = False
    for ((c, (scope, z)), c_size, zig_size) in zip(mapping, c_sizes, zig_sizes):
        out = f" - C: sizeof({c}) = {c_size}".ljust(64)
        out2 = f"Zig: @sizeOf({z}) = {zig_size}".ljust(64)
        if c_size != zig_size:
            out3 = "! MISMATCH !"
            mismatch = True
        else:
            out3 = ""
        print(out + out2 + out3)
    if mismatch:
        print()
        print('! MISMATCH detected !')
        exit(1)
    else:
        print()
        print('OK')

def find_corresponding_zig_struct_and_remove(zig_structs, c_struct):
    if c_struct == 'CUSEIMESSAGE':
        canon = 'SEIMESSAGE'
    elif c_struct == 'CUVIDEOFORMAT':
        canon = 'VIDEOFORMAT'
    elif c_struct == 'CUVIDEOFORMATEX':
        canon = 'VIDEOFORMATEX'
    else:
        canon = c_struct.removeprefix('NVENC_').removeprefix('NV_ENC_').removeprefix('NV_ENCODE_').removeprefix('CUVID').removeprefix('cuda')
        canon = canon.replace('_', '')
    for z in zig_structs:
        if z.lower() == canon.lower():
            zig_structs.remove(z)
            return z
    return None

def find_c_structs(interface_dir):
    nv_encode_api_h = interface_dir / "nvEncodeAPI.h"
    if not nv_encode_api_h.is_file():
        raise RuntimeError(f"{nv_encode_api_h} does not exist")
    nv_cuvid_h = interface_dir / "nvcuvid.h"
    if not nv_cuvid_h.is_file():
        raise RuntimeError(f"{nv_cuvid_h} does not exist")
    cuvid_dec_h = interface_dir / "cuviddec.h"
    if not cuvid_dec_h.is_file():
        raise RuntimeError(f"{cuvid_dec_h} does not exist")
    structs = {'nvdec': [], 'nvenc': []}
    for scope, header in [('nvenc', nv_encode_api_h), ('nvdec', nv_cuvid_h), ('nvdec', cuvid_dec_h)]:
        lines = [l.removesuffix('\n') for l in header.open().readlines()]
        structs[scope].extend(find_c_structs_line_by_line(lines))
    return structs

def find_c_structs_line_by_line(lines):
    structs = []
    in_struct = False
    for line in lines:
        if not in_struct and "typedef struct" in line:
            in_struct = True
        if in_struct and ((len(line) > 0 and line[0] == '}') or (len(line) > 1 and line[1] == '}')):
            struct = line.strip().removeprefix('}').removesuffix(';').strip()
            if ',' in struct:
                struct = struct.split(',')[0].strip()
            structs.append(struct)
            in_struct = False
    return structs

def find_zig_structs():
    nvenc_zig = Path('../nvenc_bindings.zig')
    nvdec_zig = Path('../nvdec_bindings.zig')
    structs = {'nvdec': [], 'nvenc': []}
    for scope, file in [('nvenc', nvenc_zig), ('nvdec', nvdec_zig)]:
        lines = [l.removesuffix('\n') for l in file.open().readlines()]
        structs[scope].extend(find_zig_structs_line_by_line(lines))
    return structs

def find_zig_structs_line_by_line(lines):
    structs = []
    for line in lines:
        if 'pub const' in line and 'extern struct' in line:
            struct = line.strip().removeprefix('pub const').removesuffix('= extern struct {').strip()
            structs.append(struct)
    return structs

if __name__ == "__main__":
    interface_dir = Path(sys.argv[1])
    cuda_h = Path(sys.argv[2])
    check_bindings(interface_dir, cuda_h)
